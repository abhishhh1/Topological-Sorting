
import java.util.ArrayList;
import java.util.*;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author abhishhh1
 */

class Pair {
    int node;
    int distance;
    Pair(int node,int distance) {
        this.distance=distance;
        this.node=node;
    }
}

public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    final static int MX_LEN = 26;
    static ArrayList<Integer> adj[] = new ArrayList[MX_LEN];
    static int timeToComplete[] = new int[MX_LEN];
   
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Critical Path Method");

        jButton1.setText("Add Activity");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Remove Activity");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Evaluate");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Reset");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Activity", "Predecessor", "Duration", "Start Time", "Completion time", "Critical Path"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
        }

        jLabel2.setText("Critical Path");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(65, 65, 65))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 772, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(81, 81, 81))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

 public static boolean cycleCheck(int u, int n, ArrayList<Integer> adj[], int col[]) {
        col[u] = 1;
        for (Integer it : adj[u]) {
            if (col[it] == 1) return true;
            if (col[it] == 0 && cycleCheck(it, n, adj, col)) return true;
        }
        col[u] = 2;
        return false;
    }
 
    public static void topologicalSort(int n, ArrayList<Integer> adj[], int timeToComplete[], int dis[],DefaultTableModel model) {
       
        
        int indeg[] = new int[n];
        for (int i = 0; i < n; i++) {
            for (Integer it : adj[i]) {
                indeg[it]++;
            }
        }

        Queue<Pair> q = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            if (indeg[i] == 0) {
                q.add(new Pair(i, 0));
            }
        }

        int ans[] = new int[n];
        int par[] = new int[n];
        for (int i = 0; i < n; i++) {
            ans[i] = 0;
            par[i] = -1;
        }

        while (!q.isEmpty()) {
            Pair top = q.poll();
            int node = top.node;
            ans[node] = top.distance + timeToComplete[node];
            for (Integer it : adj[node]) {
                if (dis[it] < top.distance + timeToComplete[node]) {
                    par[it] = node;
                    dis[it] = top.distance + timeToComplete[node];
                }
                indeg[it]--;
                if (indeg[it] == 0) {
                    q.add(new Pair(it, dis[it]));
                }
            }
        }

        System.out.print("Activity\tStart Time\tComp. Time\tCritical Path\n");
        for (int i = 0; i < n; i++) {
            System.out.print((char) (i + 65) + "\t\t\t" + (ans[i] - timeToComplete[i]) + "\t\t\t" + (ans[i]) + "\t\t\t");
            Stack<Integer> path = new Stack<Integer>();
            int curr = i;

            while (curr != -1) {
                path.push(curr);
                curr = par[curr];
            }
               
            String str="";
            while (!path.isEmpty()) {
                int node = path.pop();
                if (!path.isEmpty()) {
                    System.out.print((char) (node + 65) + "->");
                    str+=(char) (node + 65) + "->";
                } else {
                    str+=(char) (node + 65) + ".";
                    System.out.print((char) (node + 65) + "\n");
                }
            }
            model.setValueAt(ans[i]-timeToComplete[i],i,3);
            model.setValueAt(ans[i],i,4);
            System.out.println(str);
            model.setValueAt(str, i, 5);
        }

        Stack<Integer> path = new Stack<Integer>();
        int curr = n - 1;
        while (curr != -1) {
            path.push(curr);
            curr = par[curr];
        }

        System.out.println();
        System.out.println("The Critical Path is ");
            
        String str="";
        
        while (!path.isEmpty()) {
            int node = path.pop();
            if (!path.isEmpty()) {
                System.out.print((char) (node + 65) + "->");
                str+=(char) (node + 65) + "->";
            } else {
                str+=(char) (node + 65) + ".";
                System.out.print((char) (node + 65) + ".");
            }
        }
        //Syst
        jTextField1.setText(str);
        
    }    
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int n = model.getRowCount();
        
        int count=0;
        for(int i=0;i<n;i++) {
            String ac = (String)model.getValueAt(i, 0);
            if(ac!=null) {
                count++;
            }
        }
        
        n=count;
        
        for(int ri=0;ri<n;ri++) {
            //activity
            String ac = (String)model.getValueAt(ri, 0);
            String pred = (String)model.getValueAt(ri, 1);
            String dur = (String)model.getValueAt(ri, 2);
            
            String st = ac+" "+pred+" "+dur;

            //System.out.println(st);
            String[] value = st.split(" ");
            int activity = value[0].charAt(0) - 65;
            int numOfPre = value.length - 2;
            for (int i = 1; i <= numOfPre; i++) {
                if (value[i].length() > 0) {
                    int pre = value[i].charAt(0) - 65;
                    if (Character.isLetter(value[i].charAt(0))) {
                        adj[pre].add(activity);
                    }
                }
            }
            int duration = Integer.parseInt(value[value.length - 1]);
            timeToComplete[activity] = duration;
        }
        
        int isCyclePresent = 0;
        int col[] = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            col[i] = 0;
        }

        for (int i = 1; i <= n; i++) {
            if (col[i] == 0) {
                if (cycleCheck(i, n, adj, col)) {
                    isCyclePresent = 1;
                    break;
                }
            }
        }

        if (isCyclePresent == 1) {
            System.out.println("No Ordering of execution possible. Deadlock Situation.");
        } else {
            int dis[] = new int[n];
            for (int i = 0; i < n; i++) {
                dis[i] = 0;
            }
            topologicalSort(n, adj, timeToComplete, dis,model);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        //DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
                // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int ptr = model.getRowCount();
       // Object row [6]= 
        //model.addRow(null);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
       
       for (int i = 0; i < MX_LEN; i++) {
            adj[i] = new ArrayList<>();
       }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable1;
    public static javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
